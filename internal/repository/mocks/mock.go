// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -source=repository.go -destination=mocks/mock.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	model "balancer/internal/model"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockLimitsRepository is a mock of LimitsRepository interface.
type MockLimitsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLimitsRepositoryMockRecorder
	isgomock struct{}
}

// MockLimitsRepositoryMockRecorder is the mock recorder for MockLimitsRepository.
type MockLimitsRepositoryMockRecorder struct {
	mock *MockLimitsRepository
}

// NewMockLimitsRepository creates a new mock instance.
func NewMockLimitsRepository(ctrl *gomock.Controller) *MockLimitsRepository {
	mock := &MockLimitsRepository{ctrl: ctrl}
	mock.recorder = &MockLimitsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLimitsRepository) EXPECT() *MockLimitsRepositoryMockRecorder {
	return m.recorder
}

// CreateUserLimits mocks base method.
func (m *MockLimitsRepository) CreateUserLimits(ctx context.Context, info model.ClientLimits) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserLimits", ctx, info)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserLimits indicates an expected call of CreateUserLimits.
func (mr *MockLimitsRepositoryMockRecorder) CreateUserLimits(ctx, info any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserLimits", reflect.TypeOf((*MockLimitsRepository)(nil).CreateUserLimits), ctx, info)
}

// DeleteUserLimits mocks base method.
func (m *MockLimitsRepository) DeleteUserLimits(ctx context.Context, clientId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserLimits", ctx, clientId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserLimits indicates an expected call of DeleteUserLimits.
func (mr *MockLimitsRepositoryMockRecorder) DeleteUserLimits(ctx, clientId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserLimits", reflect.TypeOf((*MockLimitsRepository)(nil).DeleteUserLimits), ctx, clientId)
}

// GetUserLimits mocks base method.
func (m *MockLimitsRepository) GetUserLimits(ctx context.Context, clientId string) (model.ClientLimits, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserLimits", ctx, clientId)
	ret0, _ := ret[0].(model.ClientLimits)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserLimits indicates an expected call of GetUserLimits.
func (mr *MockLimitsRepositoryMockRecorder) GetUserLimits(ctx, clientId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserLimits", reflect.TypeOf((*MockLimitsRepository)(nil).GetUserLimits), ctx, clientId)
}

// IsClientExists mocks base method.
func (m *MockLimitsRepository) IsClientExists(ctx context.Context, userId string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsClientExists", ctx, userId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsClientExists indicates an expected call of IsClientExists.
func (mr *MockLimitsRepositoryMockRecorder) IsClientExists(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsClientExists", reflect.TypeOf((*MockLimitsRepository)(nil).IsClientExists), ctx, userId)
}

// UpdateUserLimits mocks base method.
func (m *MockLimitsRepository) UpdateUserLimits(ctx context.Context, updateData model.ClientLimits) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserLimits", ctx, updateData)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserLimits indicates an expected call of UpdateUserLimits.
func (mr *MockLimitsRepositoryMockRecorder) UpdateUserLimits(ctx, updateData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserLimits", reflect.TypeOf((*MockLimitsRepository)(nil).UpdateUserLimits), ctx, updateData)
}
