// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=mocks/mock.go
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	model "balancer/internal/model"
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockTokenService is a mock of TokenService interface.
type MockTokenService struct {
	ctrl     *gomock.Controller
	recorder *MockTokenServiceMockRecorder
	isgomock struct{}
}

// MockTokenServiceMockRecorder is the mock recorder for MockTokenService.
type MockTokenServiceMockRecorder struct {
	mock *MockTokenService
}

// NewMockTokenService creates a new mock instance.
func NewMockTokenService(ctrl *gomock.Controller) *MockTokenService {
	mock := &MockTokenService{ctrl: ctrl}
	mock.recorder = &MockTokenServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenService) EXPECT() *MockTokenServiceMockRecorder {
	return m.recorder
}

// RequestFromUser mocks base method.
func (m *MockTokenService) RequestFromUser(ctx context.Context, ip string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestFromUser", ctx, ip)
	ret0, _ := ret[0].(error)
	return ret0
}

// RequestFromUser indicates an expected call of RequestFromUser.
func (mr *MockTokenServiceMockRecorder) RequestFromUser(ctx, ip any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestFromUser", reflect.TypeOf((*MockTokenService)(nil).RequestFromUser), ctx, ip)
}

// StartRefillWorker mocks base method.
func (m *MockTokenService) StartRefillWorker(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartRefillWorker", ctx)
}

// StartRefillWorker indicates an expected call of StartRefillWorker.
func (mr *MockTokenServiceMockRecorder) StartRefillWorker(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartRefillWorker", reflect.TypeOf((*MockTokenService)(nil).StartRefillWorker), ctx)
}

// MockChecker is a mock of Checker interface.
type MockChecker struct {
	ctrl     *gomock.Controller
	recorder *MockCheckerMockRecorder
	isgomock struct{}
}

// MockCheckerMockRecorder is the mock recorder for MockChecker.
type MockCheckerMockRecorder struct {
	mock *MockChecker
}

// NewMockChecker creates a new mock instance.
func NewMockChecker(ctrl *gomock.Controller) *MockChecker {
	mock := &MockChecker{ctrl: ctrl}
	mock.recorder = &MockCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChecker) EXPECT() *MockCheckerMockRecorder {
	return m.recorder
}

// CheckerWithTicker mocks base method.
func (m *MockChecker) CheckerWithTicker(ctx context.Context, t *time.Ticker) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckerWithTicker", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckerWithTicker indicates an expected call of CheckerWithTicker.
func (mr *MockCheckerMockRecorder) CheckerWithTicker(ctx, t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckerWithTicker", reflect.TypeOf((*MockChecker)(nil).CheckerWithTicker), ctx, t)
}

// MockBalanceStrategyService is a mock of BalanceStrategyService interface.
type MockBalanceStrategyService struct {
	ctrl     *gomock.Controller
	recorder *MockBalanceStrategyServiceMockRecorder
	isgomock struct{}
}

// MockBalanceStrategyServiceMockRecorder is the mock recorder for MockBalanceStrategyService.
type MockBalanceStrategyServiceMockRecorder struct {
	mock *MockBalanceStrategyService
}

// NewMockBalanceStrategyService creates a new mock instance.
func NewMockBalanceStrategyService(ctrl *gomock.Controller) *MockBalanceStrategyService {
	mock := &MockBalanceStrategyService{ctrl: ctrl}
	mock.recorder = &MockBalanceStrategyServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBalanceStrategyService) EXPECT() *MockBalanceStrategyServiceMockRecorder {
	return m.recorder
}

// Balance mocks base method.
func (m *MockBalanceStrategyService) Balance(ctx context.Context) (model.Proxy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Balance", ctx)
	ret0, _ := ret[0].(model.Proxy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Balance indicates an expected call of Balance.
func (mr *MockBalanceStrategyServiceMockRecorder) Balance(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Balance", reflect.TypeOf((*MockBalanceStrategyService)(nil).Balance), ctx)
}

// MockLimitsManagerService is a mock of LimitsManagerService interface.
type MockLimitsManagerService struct {
	ctrl     *gomock.Controller
	recorder *MockLimitsManagerServiceMockRecorder
	isgomock struct{}
}

// MockLimitsManagerServiceMockRecorder is the mock recorder for MockLimitsManagerService.
type MockLimitsManagerServiceMockRecorder struct {
	mock *MockLimitsManagerService
}

// NewMockLimitsManagerService creates a new mock instance.
func NewMockLimitsManagerService(ctrl *gomock.Controller) *MockLimitsManagerService {
	mock := &MockLimitsManagerService{ctrl: ctrl}
	mock.recorder = &MockLimitsManagerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLimitsManagerService) EXPECT() *MockLimitsManagerServiceMockRecorder {
	return m.recorder
}

// CreateClientLimits mocks base method.
func (m *MockLimitsManagerService) CreateClientLimits(ctx context.Context, clientLimits model.ClientLimits) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClientLimits", ctx, clientLimits)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateClientLimits indicates an expected call of CreateClientLimits.
func (mr *MockLimitsManagerServiceMockRecorder) CreateClientLimits(ctx, clientLimits any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClientLimits", reflect.TypeOf((*MockLimitsManagerService)(nil).CreateClientLimits), ctx, clientLimits)
}

// DeleteClientLimits mocks base method.
func (m *MockLimitsManagerService) DeleteClientLimits(ctx context.Context, clientId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClientLimits", ctx, clientId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClientLimits indicates an expected call of DeleteClientLimits.
func (mr *MockLimitsManagerServiceMockRecorder) DeleteClientLimits(ctx, clientId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClientLimits", reflect.TypeOf((*MockLimitsManagerService)(nil).DeleteClientLimits), ctx, clientId)
}

// GetClientLimits mocks base method.
func (m *MockLimitsManagerService) GetClientLimits(ctx context.Context, clientId string) (model.ClientLimits, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientLimits", ctx, clientId)
	ret0, _ := ret[0].(model.ClientLimits)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientLimits indicates an expected call of GetClientLimits.
func (mr *MockLimitsManagerServiceMockRecorder) GetClientLimits(ctx, clientId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientLimits", reflect.TypeOf((*MockLimitsManagerService)(nil).GetClientLimits), ctx, clientId)
}

// UpdateClientLimits mocks base method.
func (m *MockLimitsManagerService) UpdateClientLimits(ctx context.Context, clientLimits model.ClientLimits) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClientLimits", ctx, clientLimits)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClientLimits indicates an expected call of UpdateClientLimits.
func (mr *MockLimitsManagerServiceMockRecorder) UpdateClientLimits(ctx, clientLimits any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClientLimits", reflect.TypeOf((*MockLimitsManagerService)(nil).UpdateClientLimits), ctx, clientLimits)
}
